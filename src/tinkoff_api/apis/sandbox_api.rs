/*
 * OpenAPI
 *
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: al.a.volkov@tinkoff.ru
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::tinkoff_api::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `sandbox_clear_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SandboxClearPostError {
    Status500(crate::tinkoff_api::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `sandbox_currencies_balance_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SandboxCurrenciesBalancePostError {
    Status500(crate::tinkoff_api::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `sandbox_positions_balance_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SandboxPositionsBalancePostError {
    Status500(crate::tinkoff_api::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `sandbox_register_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SandboxRegisterPostError {
    Status500(crate::tinkoff_api::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `sandbox_remove_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SandboxRemovePostError {
    Status500(crate::tinkoff_api::models::Error),
    UnknownValue(serde_json::Value),
}


/// Удаление всех позиций клиента
pub async fn sandbox_clear_post(configuration: &configuration::Configuration, broker_account_id: Option<&str>) -> Result<crate::tinkoff_api::models::Empty, Error<SandboxClearPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sandbox/clear", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = broker_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("brokerAccountId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SandboxClearPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn sandbox_currencies_balance_post(configuration: &configuration::Configuration, sandbox_set_currency_balance_request: crate::tinkoff_api::models::SandboxSetCurrencyBalanceRequest, broker_account_id: Option<&str>) -> Result<crate::tinkoff_api::models::Empty, Error<SandboxCurrenciesBalancePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sandbox/currencies/balance", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = broker_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("brokerAccountId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&sandbox_set_currency_balance_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SandboxCurrenciesBalancePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn sandbox_positions_balance_post(configuration: &configuration::Configuration, sandbox_set_position_balance_request: crate::tinkoff_api::models::SandboxSetPositionBalanceRequest, broker_account_id: Option<&str>) -> Result<crate::tinkoff_api::models::Empty, Error<SandboxPositionsBalancePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sandbox/positions/balance", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = broker_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("brokerAccountId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&sandbox_set_position_balance_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SandboxPositionsBalancePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Создание счета и валютных позиций для клиента
pub async fn sandbox_register_post(configuration: &configuration::Configuration, sandbox_register_request: Option<crate::tinkoff_api::models::SandboxRegisterRequest>) -> Result<crate::tinkoff_api::models::SandboxRegisterResponse, Error<SandboxRegisterPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sandbox/register", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&sandbox_register_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SandboxRegisterPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Удаление счета клиента
pub async fn sandbox_remove_post(configuration: &configuration::Configuration, broker_account_id: Option<&str>) -> Result<crate::tinkoff_api::models::Empty, Error<SandboxRemovePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sandbox/remove", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = broker_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("brokerAccountId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SandboxRemovePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

